entrypoints Module ;

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" Ident "=" [EnumId] ;
ClaferDecl.     Declaration ::= Clafer ;
ConstDecl.      Declaration ::= Constraint ;

Clafer.         Clafer ::= Abstract GCard Ident Super Card Elements ;
Constraint.     Constraint ::= "[" [Exp] "]" ;

AbstractEmpty. Abstract ::= ;
Abstract.      Abstract ::= "abstract" ;

ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [ElementCl] "}" ;

Subclafer.      ElementCl ::= Clafer ;
ClaferUse.      ElementCl ::= "`" Name Card Elements ;
Subconstraint.  ElementCl ::= Constraint ;

SuperEmpty.     Super ::=  ;
SuperColon.     Super ::= ":" Name ;
SuperExtends.   Super ::= "extends" Name ;
SuperArrow.     Super ::= "->" [ModId] Exp ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= "<" GNCard ">" ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardInterval.   Card ::= NCard ;

GNCard.         GNCard ::= Integer "-"  ExInteger ;
NCard.          NCard  ::= Integer ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= Integer ;

Name.           Name ::= [ModId] Ident ;

DeclExp.        Exp   ::= ExQuant [Decl] "|" Exp1 ;
EIff.           Exp1  ::= Exp1 "<=>" Exp2 ;
EImplies.       Exp2  ::= Exp2 "=>"  Exp3 ;
EImpliesElse.   Exp2  ::= Exp2 "=>"  Exp3 "else" Exp3 ;
EOr.            Exp3  ::= Exp3 "||"  Exp4 ;
EXor.           Exp4  ::= Exp4 "xor" Exp5 ;
EAnd.           Exp5  ::= Exp5 "&&"  Exp6 ;
ENeg.           Exp6  ::= "~" Exp7 ;
QuantExp.       Exp7  ::= Quant Exp7 ;
ELt.            Exp7  ::= Exp7 "<"  Exp8 ;
EGt.            Exp7  ::= Exp7 ">"  Exp8 ;
EREq.           Exp7  ::= Exp7 "="  Exp8 ;
ELte.           Exp7  ::= Exp7 "<=" Exp8 ;
EGte.           Exp7  ::= Exp7 ">=" Exp8 ;
ENeq.           Exp7  ::= Exp7 "!=" Exp8 ;
EIn.            Exp7  ::= Exp7 "in" Exp8 ;
ENin.           Exp7  ::= Exp7 "not" "in" Exp8 ;
EAdd.           Exp8  ::= Exp8  "+" Exp9 ;
ESub.           Exp8  ::= Exp8  "-" Exp9 ;
EMul.           Exp9  ::= Exp9 "*" Exp10 ;
EDiv.           Exp9  ::= Exp9 "/" Exp10 ;
ECSetExp.       Exp10 ::= "#" Exp11 ;
EInt.           Exp10 ::= Integer ;
EStr.           Exp10 ::= String ;
Union.          Exp11 ::= Exp11 "++" Exp12 ;
Difference.     Exp11 ::= Exp11 "--" Exp12 ;
Intersection.   Exp12 ::= Exp12 "&"  Exp13 ;
Domain.         Exp13 ::= Exp13 "<:" Exp14 ;
Range.          Exp14 ::= Exp14 ":>" Exp15 ;
Join.           Exp15 ::= Exp15 "."  Exp16 ;
ClaferId.       Exp16 ::= Ident ;

Decl.           Decl ::= Disj [LocId] ":" Exp ;

DisjEmpty.      Disj ::= ;
Disj.           Disj ::= "disj" ;

QuantNo.        Quant ::= "no" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

ExQuantAll.     ExQuant ::= "all" ;
ExQuantQuant.   ExQuant ::= Quant ;

rules           EnumId ::= Ident ;
rules           ModId  ::= Ident ;
rules           LocId  ::= Ident ;

separator          Declaration ""  ;
separator nonempty EnumId      "|" ;
separator          ElementCl   ""  ;
separator          Exp         ""  ;
separator nonempty Decl        "," ;
separator nonempty LocId       "," ;
terminator         ModId       ":" ;

coercions Exp 16 ;
