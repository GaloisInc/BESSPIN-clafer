--layout toplevel;

entrypoints Module ;

comment "--" ;
comment "{-" "-}" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" Ident "=" [EnumId] ;
ClaferDecl.     Declaration ::= Clafer ;
ConstDecl.      Declaration ::= Constraint ;

Clafer.         Clafer ::= Abstract GCard Ident Super Card Elements ;
Constraint.     Constraint ::= "[" [LExp] "]" ;

AbstractEmpty. Abstract ::= ;
Abstract.      Abstract ::= "abstract" ;

ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [ElementCl] "}" ;

Subclafer.      ElementCl ::= Clafer ;
ClaferUse.      ElementCl ::= "`" Name Card Elements ;
Subconstraint.  ElementCl ::= Constraint ;

SuperEmpty.     Super ::=  ;
SuperColon.     Super ::= ":" Name ;
SuperExtends.   Super ::= "extends" Name ;
SuperArrow.     Super ::= "->" [ModId] SExp ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= "<" GNCard ">" ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardInterval.   Card ::= NCard ;

GNCard.         GNCard ::= Integer "-"  ExInteger ;
NCard.          NCard  ::= Integer ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= Integer ;

Name.           Name ::= [ModId] Ident ;

EIff.           LExp  ::= LExp  Iff     LExp1 ;
EImplies.       LExp1 ::= LExp1 Implies LExp2 ;
EImpliesElse.   LExp1 ::= LExp1 Implies LExp2 "else" LExp2 ;
EOr.            LExp2 ::= LExp2 Or      LExp3 ;
EXor.           LExp3 ::= LExp3 Xor     LExp4 ;
EAnd.           LExp4 ::= LExp4 And     LExp5 ;
ENeg.           LExp5 ::= Neg LExp6 ;
ETerm.          LExp6 ::= Term ;

TermCmpExp.        Term ::= CmpExp ;
TermSet.           Term ::= SExp ;
TermQuantSet.      Term ::= Quant SExp ;
TermQuantDeclExp.  Term ::= [Decl] "|" LExp ; -- LExp causes s/r conflicts

Iff.            Iff     ::= "<=>" ;
Implies.        Implies ::= "=>" ;
And.            And     ::= "&&" ;
Xor.            Xor     ::= "xor" ;
Or.             Or      ::= "||" ;
Neg.            Neg     ::= "~" ;

ELt.            CmpExp ::= Exp "<"  Exp ;
EGt.            CmpExp ::= Exp ">"  Exp ;
EREq.           CmpExp ::= Exp "="  Exp ;
EEq.            CmpExp ::= Exp "==" Exp ;
ELte.           CmpExp ::= Exp "<=" Exp ;
EGte.           CmpExp ::= Exp ">=" Exp ;
ENeq.           CmpExp ::= Exp "!=" Exp ;
ERNeq.          CmpExp ::= Exp "/=" Exp ;
EIn.            CmpExp ::= Exp "in" Exp ;
ENin.           CmpExp ::= Exp "not" "in" Exp ;

ENumExp.        Exp ::= AExp ;
EStrExp.        Exp ::= StrExp ;

QuantNo.        Quant ::= "no" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

ExQuantAll.     ExQuant ::= "all" ;
ExQuantQuant.   ExQuant ::= Quant ;

SExpUnion.        SExp  ::= SExp  "++" SExp1 ;
SExpIntersection. SExp1 ::= SExp1 "&"  SExp2 ;
SExpDomain.       SExp2 ::= SExp2 "<:" SExp3 ;
SExpRange.        SExp3 ::= SExp3 ":>" SExp4 ;
SExpJoin.         SExp4 ::= SExp4 "."  SExp5 ;
SExpIdent.        SExp5 ::= Ident ;

Decl.           Decl ::= ExQuant Disj [LocId] ":" SExp ;

DisjEmpty.      Disj ::= ;
Disj.           Disj ::= "disj" ;

EAdd.           AExp  ::= AExp  "+" AExp1 ;
ESub.           AExp  ::= AExp  "-" AExp1 ;
EMul.           AExp1 ::= AExp1 "*" AExp2 ;
ECSetExp.       AExp2 ::= "#" SExp ;
EASetExp.       AExp2 ::= SExp ;
EInt.           AExp2 ::= Integer ;

EConc.          StrExp  ::= StrExp  "++" StrExp ;
EStr.           StrExp  ::= String ;

rules           EnumId ::= Ident ;
rules           ModId  ::= Ident ;
rules           LocId  ::= Ident ;

separator          Declaration ""  ;
separator nonempty EnumId      "|" ;
separator          ElementCl   ""  ;
separator          LExp        ""  ;
separator nonempty Decl        "," ;
separator nonempty LocId       "," ;
terminator         ModId       "/" ;

coercions SExp 5 ;
coercions LExp 6 ;
coercions AExp 2 ;