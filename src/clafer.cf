entrypoints Module, Clafer, Constraint, Assertion, Goal ;


-- To regenerate grammar (see src/Makefile, the goal 'grammar'):
--         cd src/
--         bnfc -p "Language.Clafer.Front" --ghc clafer.cf
--         happy -gca Language/Clafer/Front/Parclafer.y
--         alex -g Language/Clafer/Front/Lexclafer.x

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" PosIdent "=" [EnumId] ;
ElementDecl.    Declaration ::= Element ;

Clafer.         Clafer ::= Abstract GCard PosIdent Super Reference Card Init Elements ;
Constraint.     Constraint ::= "[" [Exp] "]" ;
Assertion.      Assertion ::= "assert" "[" [Exp] "]";
Goal.           Goal ::= "<<" [Exp] ">>" ;


AbstractEmpty.  Abstract ::= ;
Abstract.       Abstract ::= "abstract" ;

ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [Element] "}" ;

Subclafer.      Element ::= Clafer ;
ClaferUse.      Element ::= "`" Name Card Elements ;
Subconstraint.  Element ::= Constraint ;
Subgoal.        Element ::= Goal;
SubAssertion. Element ::= Assertion;

SuperEmpty.     Super ::= ;
SuperSome.      Super ::= ":" Exp18 ;

ReferenceEmpty. Reference ::= ;
ReferenceSet.   Reference ::= "->" Exp12 ;
ReferenceBag.   Reference ::= "->>" Exp12 ;

InitEmpty.      Init ::= ;
InitSome.       Init ::= InitHow Exp ;

InitConstant.   InitHow ::= "=" ;
InitDefault.    InitHow ::= ":=" ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= NCard ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardNum.        Card ::= PosInteger ;
CardInterval.   Card ::= NCard ;

NCard.          NCard  ::= PosInteger ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= PosInteger ;

Path.           Name ::= [ModId] ;

EDeclAllDisj.   Exp   ::= "all" "disj" Decl "|" Exp ;
EDeclAll.        Exp   ::= "all"        Decl "|" Exp ;
EDeclQuantDisj.  Exp   ::= Quant "disj" Decl "|" Exp ;
EDeclQuant.      Exp   ::= Quant        Decl "|" Exp ;
EGMax.          Exp1  ::= "max" Exp2 ;
EGMin.          Exp1  ::= "min" Exp2 ;
EIff.           Exp1  ::= Exp1 "<=>" Exp2 ;
EImplies.       Exp2  ::= Exp2 "=>"  Exp3 ;
EOr.            Exp3  ::= Exp3 "||"  Exp4 ;
EXor.           Exp4  ::= Exp4 "xor" Exp5 ;
EAnd.           Exp5  ::= Exp5 "&&"  Exp6 ;
ENeg.           Exp6  ::= "!" Exp7 ;
ELt.            Exp7  ::= Exp7 "<"  Exp8 ;
EGt.            Exp7  ::= Exp7 ">"  Exp8 ;
EEq.            Exp7  ::= Exp7 "="  Exp8 ;
ELte.           Exp7  ::= Exp7 "<=" Exp8 ;
EGte.           Exp7  ::= Exp7 ">=" Exp8 ;
ENeq.           Exp7  ::= Exp7 "!=" Exp8 ;
EIn.            Exp7  ::= Exp7 "in" Exp8 ;
ENin.           Exp7  ::= Exp7 "not" "in" Exp8 ;
EQuantExp.      Exp8  ::= Quant Exp12 ;
EAdd.           Exp9  ::= Exp9  "+" Exp10 ;
ESub.           Exp9  ::= Exp9  "-" Exp10 ;
EMul.           Exp10 ::= Exp10 "*" Exp11 ;
EDiv.           Exp10 ::= Exp10 "/" Exp11 ;
ERem.           Exp10 ::= Exp10 "%" Exp11 ;
ESum.           Exp11 ::= "sum" Exp12;
EProd.          Exp11 ::= "product" Exp12;
ECard.          Exp11 ::= "#" Exp12 ;
EMinExp.        Exp11 ::= "-" Exp12 ;
EImpliesElse.   Exp12 ::= "if" Exp12 "then" Exp12 "else" Exp13 ;
EInt.           Exp12 ::= PosInteger ;
EDouble.        Exp12 ::= PosDouble ;
EReal.          Exp12 ::= PosReal ;
EStr.           Exp12 ::= PosString ;
EUnion.         Exp13 ::= Exp13 "++" Exp14 ;
EUnionCom.      Exp13 ::= Exp13 ","  Exp14 ;
EDifference.    Exp14 ::= Exp14 "--" Exp15 ;
EIntersection.  Exp15 ::= Exp15 "**"  Exp16 ;
EDomain.        Exp16 ::= Exp16 "<:" Exp17 ;
ERange.         Exp17 ::= Exp17 ":>" Exp18 ;
EJoin.          Exp18 ::= Exp18 "."  Exp19 ;
ClaferId.       Exp19 ::= Name ;

Decl.           Decl ::= [LocId] ":" Exp13 ;

QuantNo.        Quant ::= "no" ;
QuantNot.       Quant ::= "not" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

EnumIdIdent.    EnumId ::= PosIdent ;
ModIdIdent.     ModId  ::= PosIdent ;
LocIdIdent.     LocId  ::= PosIdent ;

separator           Declaration ""  ;
separator  nonempty EnumId      "|" ;
separator           Element     ""  ;
separator           Exp         ""  ;
separator  nonempty LocId       ";" ;
separator  nonempty ModId       "\\" ;

coercions Exp 19 ;

position token PosInteger (digit+) ;
position token PosDouble (digit+ '.' digit+ 'e' '-'? digit+) ;
position token PosReal (digit+ '.' digit+) ;
position token PosString '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;
position token PosIdent (letter (letter|digit|'_'|'\'')*) ;
