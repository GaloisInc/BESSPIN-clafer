from ast import Module
from ast import GCard
from ast import Supers
from ast import Clafer
from ast import Exp
from ast import Declaration
from ast import LocalDeclaration
from ast import IRConstraint
from ast import FunExp
from ast import ClaferId
from ast import DeclPExp
from ast import Goal

from ast import IntegerLiteral
from ast import DoubleLiteral
from ast import StringLiteral
def getModule():
	stack = []
	module = Module.Module("")
	stack.append(module)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(2),IntegerLiteral.IntegerLiteral(1)), (IntegerLiteral.IntegerLiteral(3),IntegerLiteral.IntegerLiteral(18)))
	isAbstract=True
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Feature"
	uid="c1_Feature"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="clafer", isTop=False)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(3),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(3),IntegerLiteral.IntegerLiteral(18)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="cost"
	uid="c2_cost"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(3),IntegerLiteral.IntegerLiteral(11)), (IntegerLiteral.IntegerLiteral(3),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(5),IntegerLiteral.IntegerLiteral(1)), (IntegerLiteral.IntegerLiteral(6),IntegerLiteral.IntegerLiteral(21)))
	isAbstract=True
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="ComfortFeature"
	uid="c3_ComfortFeature"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(5),IntegerLiteral.IntegerLiteral(27)), (IntegerLiteral.IntegerLiteral(5),IntegerLiteral.IntegerLiteral(34))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(6),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(6),IntegerLiteral.IntegerLiteral(21)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="comfort"
	uid="c4_comfort"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(6),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(6),IntegerLiteral.IntegerLiteral(21))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(8),IntegerLiteral.IntegerLiteral(1)), (IntegerLiteral.IntegerLiteral(9),IntegerLiteral.IntegerLiteral(18)))
	isAbstract=True
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="FuelFeature"
	uid="c5_FuelFeature"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(8),IntegerLiteral.IntegerLiteral(24)), (IntegerLiteral.IntegerLiteral(8),IntegerLiteral.IntegerLiteral(38))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c3_ComfortFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(9),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(9),IntegerLiteral.IntegerLiteral(18)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="fuel"
	uid="c6_fuel"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(9),IntegerLiteral.IntegerLiteral(11)), (IntegerLiteral.IntegerLiteral(9),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(10),IntegerLiteral.IntegerLiteral(1)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48)))
	isAbstract=True
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Car"
	uid="c7_Car"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="clafer", isTop=False)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(11),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(23)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="ABS"
	uid="c8_ABS"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(11),IntegerLiteral.IntegerLiteral(11)), (IntegerLiteral.IntegerLiteral(11),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c9_exp", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c10_exp", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c11_exp", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c12_exp", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c13_exp", pos=((IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(12),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(13),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(17)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="CC"
	uid="c14_CC"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(13),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(13),IntegerLiteral.IntegerLiteral(21))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c15_exp", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c16_exp", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c17_exp", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c18_exp", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c6_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c19_exp", pos=((IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(14),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(1)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c20_exp", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c21_exp", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(22))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c22_exp", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(22))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c23_exp", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c24_exp", pos=((IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(25)), (IntegerLiteral.IntegerLiteral(15),IntegerLiteral.IntegerLiteral(26))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(3)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c25_exp", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c26_exp", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c27_exp", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c28_exp", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c29_exp", pos=((IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(16),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(4)])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(17),IntegerLiteral.IntegerLiteral(9)), (IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(17)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="ACC"
	uid="c30_ACC"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(17),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(17),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c31_exp", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c32_exp", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c33_exp", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c34_exp", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c6_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c35_exp", pos=((IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(18),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c36_exp", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c37_exp", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c38_exp", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c39_exp", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c40_exp", pos=((IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(29)), (IntegerLiteral.IntegerLiteral(19),IntegerLiteral.IntegerLiteral(30))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(6)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c41_exp", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c42_exp", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c43_exp", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c44_exp", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c45_exp", pos=((IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(20),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(3)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c46_exp", pos=((IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(17))), iExpType="IDeclarationParentExp", iExp=[DeclPExp.DeclPExp(quantifier="Some", declaration=None, bodyParentExp=
		Exp.Exp(expType="BodyParentExp", exptype="Set", parentId="c47_exp", pos=((IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(21),IntegerLiteral.IntegerLiteral(17))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="parent", isTop=True)])])]),
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="parent", isTop=True)])])]),
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c86_FCA", isTop=False)])])]))]))
	stack[-1].addElement(constraint)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(22),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(27)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=True, interval=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1)))
	id="Transmission"
	uid="c48_Transmission"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(22),IntegerLiteral.IntegerLiteral(24)), (IntegerLiteral.IntegerLiteral(22),IntegerLiteral.IntegerLiteral(31))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c49_exp", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c50_exp", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c51_exp", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c52_exp", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c53_exp", pos=((IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(23),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(0)])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(24),IntegerLiteral.IntegerLiteral(9)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(27)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Automatic"
	uid="c54_Automatic"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(24),IntegerLiteral.IntegerLiteral(21)), (IntegerLiteral.IntegerLiteral(24),IntegerLiteral.IntegerLiteral(32))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c55_exp", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c56_exp", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c57_exp", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c58_exp", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c6_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c59_exp", pos=((IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(25),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c60_exp", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c61_exp", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c62_exp", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c63_exp", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c64_exp", pos=((IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(29)), (IntegerLiteral.IntegerLiteral(26),IntegerLiteral.IntegerLiteral(30))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c65_exp", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c66_exp", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c67_exp", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c68_exp", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c69_exp", pos=((IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(27),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(3)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(28),IntegerLiteral.IntegerLiteral(9)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(27)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Manual"
	uid="c70_Manual"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(28),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(28),IntegerLiteral.IntegerLiteral(29))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c71_exp", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c72_exp", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c73_exp", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c74_exp", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c6_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c75_exp", pos=((IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(29),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(0)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c76_exp", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c77_exp", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c78_exp", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c79_exp", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c80_exp", pos=((IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(29)), (IntegerLiteral.IntegerLiteral(30),IntegerLiteral.IntegerLiteral(30))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(1)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c81_exp", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c82_exp", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c83_exp", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c84_exp", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c85_exp", pos=((IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(31),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(32),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="FCA"
	uid="c86_FCA"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(32),IntegerLiteral.IntegerLiteral(11)), (IntegerLiteral.IntegerLiteral(32),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c87_exp", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c88_exp", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c89_exp", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c90_exp", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c6_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c91_exp", pos=((IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(33),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c92_exp", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c93_exp", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(22))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c94_exp", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(22))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c95_exp", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c96_exp", pos=((IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(25)), (IntegerLiteral.IntegerLiteral(34),IntegerLiteral.IntegerLiteral(26))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(4)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c97_exp", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c98_exp", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c99_exp", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(10)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(14))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(19))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c100_exp", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(15)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(19))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c101_exp", pos=((IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(35),IntegerLiteral.IntegerLiteral(23))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(5)])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(36),IntegerLiteral.IntegerLiteral(9)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=True, interval=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1)))
	id="Sensor"
	uid="c102_Sensor"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(36),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(36),IntegerLiteral.IntegerLiteral(29))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c103_exp", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c104_exp", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c105_exp", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c106_exp", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c107_exp", pos=((IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(37),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(0)])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(38),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Radar"
	uid="c108_Radar"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(38),IntegerLiteral.IntegerLiteral(21)), (IntegerLiteral.IntegerLiteral(38),IntegerLiteral.IntegerLiteral(28))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c109_exp", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(31))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c110_exp", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c111_exp", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c112_exp", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c113_exp", pos=((IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(30)), (IntegerLiteral.IntegerLiteral(39),IntegerLiteral.IntegerLiteral(31))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(40),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Lidar"
	uid="c114_Lidar"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(40),IntegerLiteral.IntegerLiteral(21)), (IntegerLiteral.IntegerLiteral(40),IntegerLiteral.IntegerLiteral(28))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c115_exp", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(31))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c116_exp", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c117_exp", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c118_exp", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c119_exp", pos=((IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(30)), (IntegerLiteral.IntegerLiteral(41),IntegerLiteral.IntegerLiteral(31))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(4)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(43),IntegerLiteral.IntegerLiteral(9)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=True, interval=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1)))
	id="Alert"
	uid="c120_Alert"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(43),IntegerLiteral.IntegerLiteral(21)), (IntegerLiteral.IntegerLiteral(43),IntegerLiteral.IntegerLiteral(28))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c121_exp", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c122_exp", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c123_exp", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(14)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(18))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c124_exp", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(19)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c125_exp", pos=((IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(44),IntegerLiteral.IntegerLiteral(27))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(0)])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(45),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Haptic"
	uid="c126_Haptic"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(45),IntegerLiteral.IntegerLiteral(22)), (IntegerLiteral.IntegerLiteral(45),IntegerLiteral.IntegerLiteral(36))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c3_ComfortFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c127_exp", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(34))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c128_exp", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c129_exp", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c130_exp", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(30))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(30))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c131_exp", pos=((IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(33)), (IntegerLiteral.IntegerLiteral(46),IntegerLiteral.IntegerLiteral(34))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(4)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c132_exp", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(31))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c133_exp", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c134_exp", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c135_exp", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c136_exp", pos=((IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(30)), (IntegerLiteral.IntegerLiteral(47),IntegerLiteral.IntegerLiteral(31))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(48),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(31)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="Audible"
	uid="c137_Audible"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(48),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(48),IntegerLiteral.IntegerLiteral(37))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c3_ComfortFeature", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c138_exp", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(34))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c139_exp", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c140_exp", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(30))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c141_exp", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(30))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c4_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(30))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c142_exp", pos=((IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(33)), (IntegerLiteral.IntegerLiteral(49),IntegerLiteral.IntegerLiteral(34))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(2)])])]))
	stack[-1].addElement(constraint)
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c143_exp", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(31))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c144_exp", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c145_exp", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(22))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(27))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c146_exp", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(23)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(27))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c147_exp", pos=((IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(30)), (IntegerLiteral.IntegerLiteral(50),IntegerLiteral.IntegerLiteral(31))), iExpType="IIntExp", iExp=[IntegerLiteral.IntegerLiteral(1)])])]))
	stack[-1].addElement(constraint)
	stack.pop()
	stack.pop()
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="total_cost"
	uid="c148_total_cost"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(25))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c149_exp", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c150_exp", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c148_total_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c151_exp", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(28)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="sum", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c152_exp", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(32)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c153_exp", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(32)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(39))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c1_Feature", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(40)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c154_exp", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(40)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(40)), (IntegerLiteral.IntegerLiteral(52),IntegerLiteral.IntegerLiteral(44))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="total_comfort"
	uid="c155_total_comfort"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(21)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(28))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c156_exp", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(29)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c157_exp", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c155_total_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c158_exp", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(31)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="sum", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c159_exp", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(35)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c160_exp", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(35)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(49))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c3_ComfortFeature", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(50)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c161_exp", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(50)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(50)), (IntegerLiteral.IntegerLiteral(53),IntegerLiteral.IntegerLiteral(54))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])])])]))
	stack[-1].addElement(constraint)
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(5)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="total_fuel"
	uid="c162_total_fuel"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="", parentId="", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(18)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(25))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="integer", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
##### constraint #####
	constraint = IRConstraint.IRConstraint(isHard=True , exp=
		Exp.Exp(expType="ParentExp", exptype="Boolean", parentId="c163_exp", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(26)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="=", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c164_exp", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="this", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c162_total_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0)), (IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(0))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c165_exp", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(28)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="sum", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c166_exp", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(32)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c167_exp", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(32)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(43))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c5_FuelFeature", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(44)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c168_exp", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(44)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c2_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(44)), (IntegerLiteral.IntegerLiteral(54),IntegerLiteral.IntegerLiteral(48))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])])])]))
	stack[-1].addElement(constraint)
	stack.pop()
##### clafer #####
	pos=((IntegerLiteral.IntegerLiteral(55),IntegerLiteral.IntegerLiteral(1)), (IntegerLiteral.IntegerLiteral(55),IntegerLiteral.IntegerLiteral(11)))
	isAbstract=False
	groupCard = GCard.GCard(isKeyword=False, interval=(IntegerLiteral.IntegerLiteral(0),IntegerLiteral.IntegerLiteral(-1)))
	id="aCar"
	uid="c169_aCar"
	my_supers = Supers.Supers(isOverlapping=False, elements=[
		Exp.Exp(expType="Super", exptype="Set", parentId="", pos=((IntegerLiteral.IntegerLiteral(55),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(55),IntegerLiteral.IntegerLiteral(11))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c7_Car", isTop=True)])])
	card=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	globalCard=(IntegerLiteral.IntegerLiteral(1),IntegerLiteral.IntegerLiteral(1))
	currClafer = Clafer.Clafer(pos=pos, isAbstract=isAbstract, gcard=groupCard, ident=id, uid=uid, my_supers=my_supers, card=card, glCard=globalCard)
	stack[-1].addElement(currClafer)
	stack.append(currClafer)
	stack.pop()
##### goal #####
	goal = Goal.Goal(isMaximize=True exp=
		Exp.Exp(expType="ParentExp", exptype="Integer", parentId="c170_exp", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(4)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="min", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c171_exp", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c172_exp", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(12))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c169_aCar", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c173_exp", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c148_total_cost", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(56),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])]))
	stack[-1].addElement(goal)
##### goal #####
	goal = Goal.Goal(isMaximize=True exp=
		Exp.Exp(expType="ParentExp", exptype="Integer", parentId="c174_exp", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(4)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="min", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c175_exp", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c176_exp", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(12))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c169_aCar", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(23))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c177_exp", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c162_total_fuel", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(57),IntegerLiteral.IntegerLiteral(23))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])]))
	stack[-1].addElement(goal)
##### goal #####
	goal = Goal.Goal(isMaximize=True exp=
		Exp.Exp(expType="ParentExp", exptype="Integer", parentId="c178_exp", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(4)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation="max", elements=[
		Exp.Exp(expType="Argument", exptype="Integer", parentId="c179_exp", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c180_exp", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(8)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(12))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c169_aCar", isTop=True)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(26))), iExpType="IFunctionExp", iExp=[FunExp.FunExp(operation=".", elements=[
		Exp.Exp(expType="Argument", exptype="Set", parentId="c181_exp", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="c155_total_comfort", isTop=False)]),
		Exp.Exp(expType="Argument", exptype="Integer", parentId="", pos=((IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(13)), (IntegerLiteral.IntegerLiteral(58),IntegerLiteral.IntegerLiteral(26))), iExpType="IClaferId", iExp=[ClaferId.ClaferId(moduleName="", my_id="ref", isTop=False)])])])])])])]))
	stack[-1].addElement(goal)
	return module