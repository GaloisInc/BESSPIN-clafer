scope({c0_AggregationKind:3, c0_Boolean:0, c0_Classifier:5, c0_DataType:2, c0_DirectedRelationship:5, c0_Element:31, c0_ExtensionEnd:0, c0_Feature:4, c0_Generalization:5, c0_InstanceValue:0, c0_Integer:4, c0_LiteralBoolean:0, c0_LiteralInteger:0, c0_LiteralNull:0, c0_LiteralSpecification:5, c0_LiteralString:0, c0_LiteralUnlimitedNatural:0, c0_NamedElement:30, c0_PrimitiveType:0, c0_Property:4, c0_Sequence:0, c0_Set:0, c0_String:64, c0_StructuralFeature:4, c0_UnlimitedNatural:4, c0_ValueSpecification:19, c0_VisibilityKind:4, c0_aggregation:4, c0_association:4, c0_associationEnd:4, c0_attribute:20, c0_class:4, c0_classifier:4, c0_datatype:4, c0_default:4, c0_defaultValue:4, c0_endType:5, c0_feature:5, c0_featuringClassifier:20, c0_general:25, c0_generalization:5, c0_generalizationSet:5, c0_inheritedMember:25, c0_instance:0, c0_isAbstract:5, c0_isComposite:4, c0_isDerived:4, c0_isDerivedUnion:4, c0_isOrdered:4, c0_isReadOnly:4, c0_isStatic:4, c0_isSubstitutable:5, c0_isUnique:4, c0_lower:4, c0_lowerValue:4, c0_memberEnd:4, c0_name:30, c0_opposite:4, c0_ownedAttribute:2, c0_ownedElement:961, c0_owner:31, c0_owningAssociation:4, c0_powertypeExtent:5, c0_qualifiedName:30, c0_redefinedClassifier:25, c0_redefinedProperty:16, c0_relatedElement:10, c0_source:10, c0_specific:5, c0_subsettedProperty:16, c0_target:10, c0_upper:4, c0_upperValue:4, c0_value:0, c0_visibility:30, c1_general:5, c1_relatedElement:31, c1_value:0, c2_value:0, c3_value:0});
defaultScope(1);
intRange(-8, 7);
stringLength(16);

c0_Boolean = Abstract("c0_Boolean");
c0_Integer = Abstract("c0_Integer");
c0_String = Abstract("c0_String");
c0_UnlimitedNatural = Abstract("c0_UnlimitedNatural");
c0_Sequence = Abstract("c0_Sequence");
c0_Set = Abstract("c0_Set");
c0_Element = Abstract("c0_Element");
c0_DirectedRelationship = Abstract("c0_DirectedRelationship");
c0_VisibilityKind = Abstract("c0_VisibilityKind");
c0_AggregationKind = Abstract("c0_AggregationKind");
c0_NamedElement = Abstract("c0_NamedElement").extending(c0_Element);
c0_Slot = Abstract("c0_Slot").extending(c0_Element);
c0_Generalization = Abstract("c0_Generalization").extending(c0_DirectedRelationship);
c0_ValueSpecification = Abstract("c0_ValueSpecification").extending(c0_NamedElement);
c0_Classifier = Abstract("c0_Classifier").extending(c0_NamedElement);
c0_Feature = Abstract("c0_Feature").extending(c0_NamedElement);
c0_InstanceSpecification = Abstract("c0_InstanceSpecification").extending(c0_NamedElement);
c0_GeneralizationSet = Abstract("c0_GeneralizationSet").extending(c0_NamedElement);
c0_Class = Abstract("c0_Class").extending(c0_Classifier);
c0_DataType = Abstract("c0_DataType").extending(c0_Classifier);
c0_EnumerationLiteral = Abstract("c0_EnumerationLiteral").extending(c0_InstanceSpecification);
c0_LiteralSpecification = Abstract("c0_LiteralSpecification").extending(c0_ValueSpecification);
c0_StructuralFeature = Abstract("c0_StructuralFeature").extending(c0_Feature);
c0_InstanceValue = Abstract("c0_InstanceValue").extending(c0_ValueSpecification);
c0_Association = Abstract("c0_Association").extending(c0_Classifier);
c0_Property = Abstract("c0_Property").extending(c0_StructuralFeature);
c0_Enumeration = Abstract("c0_Enumeration").extending(c0_DataType);
c0_PrimitiveType = Abstract("c0_PrimitiveType").extending(c0_DataType);
c0_LiteralBoolean = Abstract("c0_LiteralBoolean").extending(c0_LiteralSpecification);
c0_LiteralString = Abstract("c0_LiteralString").extending(c0_LiteralSpecification);
c0_LiteralNull = Abstract("c0_LiteralNull").extending(c0_LiteralSpecification);
c0_LiteralInteger = Abstract("c0_LiteralInteger").extending(c0_LiteralSpecification);
c0_LiteralUnlimitedNatural = Abstract("c0_LiteralUnlimitedNatural").extending(c0_LiteralSpecification);
c0_ExtensionEnd = Abstract("c0_ExtensionEnd").extending(c0_Property);
c0_ownedElement = c0_Element.addChild("c0_ownedElement");
c0_owner = c0_Element.addChild("c0_owner").withCard(0, 1);
c0_name = c0_NamedElement.addChild("c0_name").withCard(0, 1).extending(c0_String);
c0_qualifiedName = c0_NamedElement.addChild("c0_qualifiedName").withCard(0, 1).extending(c0_String);
c0_visibility = c0_NamedElement.addChild("c0_visibility").withCard(0, 1);
c0_relatedElement = c0_DirectedRelationship.addChild("c0_relatedElement").withCard(1);
c0_source = c0_DirectedRelationship.addChild("c0_source").withCard(1);
c0_target = c0_DirectedRelationship.addChild("c0_target").withCard(1);
c0_isActive = c0_Class.addChild("c0_isActive").withCard(0, 1);
c0_superClass = c0_Class.addChild("c0_superClass");
c0_nestedClassifier = c0_Class.addChild("c0_nestedClassifier").extending(c0_Classifier);
c0_default = c0_Property.addChild("c0_default").withCard(0, 1).extending(c0_String);
c0_isComposite = c0_Property.addChild("c0_isComposite").withCard(0, 1);
c0_isDerived = c0_Property.addChild("c0_isDerived").withCard(0, 1);
c0_isDerivedUnion = c0_Property.addChild("c0_isDerivedUnion").withCard(0, 1);
c0_aggregation = c0_Property.addChild("c0_aggregation").withCard(0, 1);
c0_class = c0_Property.addChild("c0_class").withCard(0, 1);
c0_opposite = c0_Property.addChild("c0_opposite").withCard(0, 1);
c0_owningAssociation = c0_Property.addChild("c0_owningAssociation").withCard(0, 1);
c0_redefinedProperty = c0_Property.addChild("c0_redefinedProperty");
c0_subsettedProperty = c0_Property.addChild("c0_subsettedProperty");
c0_datatype = c0_Property.addChild("c0_datatype").withCard(0, 1);
c0_association = c0_Property.addChild("c0_association").withCard(0, 1);
c0_defaultValue = c0_Property.addChild("c0_defaultValue").withCard(0, 1).extending(c0_ValueSpecification);
c0_qualifier = c0_Property.addChild("c0_qualifier").extending(c0_Property);
c0_associationEnd = c0_Property.addChild("c0_associationEnd").withCard(0, 1);
c0_ownedLiteral = c0_Enumeration.addChild("c0_ownedLiteral").extending(c0_EnumerationLiteral);
c0_ownedAttribute = c0_DataType.addChild("c0_ownedAttribute").extending(c0_Property);
c0_enumeration = c0_EnumerationLiteral.addChild("c0_enumeration").withCard(0, 1);
c0_isAbstract = c0_Classifier.addChild("c0_isAbstract").withCard(0, 1);
c0_feature = c0_Classifier.addChild("c0_feature");
c0_inheritedMember = c0_Classifier.addChild("c0_inheritedMember");
c0_general = c0_Classifier.addChild("c0_general");
c0_generalization = c0_Classifier.addChild("c0_generalization").extending(c0_Generalization);
c0_attribute = c0_Classifier.addChild("c0_attribute");
c0_redefinedClassifier = c0_Classifier.addChild("c0_redefinedClassifier");
c0_powertypeExtent = c0_Classifier.addChild("c0_powertypeExtent");
c0_isStatic = c0_Feature.addChild("c0_isStatic").withCard(0, 1);
c0_featuringClassifier = c0_Feature.addChild("c0_featuringClassifier");
c0_package = Clafer("c0_package").withCard(1, 1).extending(c0_VisibilityKind);
c0_private = Clafer("c0_private").withCard(1, 1).extending(c0_VisibilityKind);
c0_protected = Clafer("c0_protected").withCard(1, 1).extending(c0_VisibilityKind);
c0_public = Clafer("c0_public").withCard(1, 1).extending(c0_VisibilityKind);
c0_value = c0_LiteralBoolean.addChild("c0_value").withCard(0, 1);
c1_value = c0_LiteralString.addChild("c1_value").withCard(0, 1).extending(c0_String);
c2_value = c0_LiteralInteger.addChild("c2_value").withCard(0, 1).extending(c0_Integer);
c3_value = c0_LiteralUnlimitedNatural.addChild("c3_value").withCard(0, 1).extending(c0_UnlimitedNatural);
c0_isReadOnly = c0_StructuralFeature.addChild("c0_isReadOnly").withCard(0, 1);
c0_isOrdered = c0_StructuralFeature.addChild("c0_isOrdered").withCard(0, 1);
c0_isUnique = c0_StructuralFeature.addChild("c0_isUnique").withCard(0, 1);
c0_lower = c0_StructuralFeature.addChild("c0_lower").withCard(0, 1).extending(c0_Integer);
c0_upper = c0_StructuralFeature.addChild("c0_upper").withCard(0, 1).extending(c0_UnlimitedNatural);
c0_upperValue = c0_StructuralFeature.addChild("c0_upperValue").withCard(0, 1).extending(c0_ValueSpecification);
c0_lowerValue = c0_StructuralFeature.addChild("c0_lowerValue").withCard(0, 1).extending(c0_ValueSpecification);
c0_slot = c0_InstanceSpecification.addChild("c0_slot").extending(c0_Slot);
c0_classifier = c0_InstanceSpecification.addChild("c0_classifier");
c0_specification = c0_InstanceSpecification.addChild("c0_specification").withCard(0, 1).extending(c0_ValueSpecification);
c0_owningInstance = c0_Slot.addChild("c0_owningInstance").withCard(1, 1);
c4_value = c0_Slot.addChild("c4_value").extending(c0_ValueSpecification);
c0_definingFeature = c0_Slot.addChild("c0_definingFeature").withCard(1, 1);
c0_instance = c0_InstanceValue.addChild("c0_instance").withCard(1, 1);
c0_isSubstitutable = c0_Generalization.addChild("c0_isSubstitutable").withCard(0, 1);
c0_specific = c0_Generalization.addChild("c0_specific").withCard(1, 1);
c1_general = c0_Generalization.addChild("c1_general").withCard(1, 1);
c0_generalizationSet = c0_Generalization.addChild("c0_generalizationSet");
c1_relatedElement = c0_Association.addChild("c1_relatedElement").withCard(1);
c1_isDerived = c0_Association.addChild("c1_isDerived").withCard(0, 1);
c0_ownedEnd = c0_Association.addChild("c0_ownedEnd").extending(c0_Property);
c0_endType = c0_Association.addChild("c0_endType").withCard(1);
c0_memberEnd = c0_Association.addChild("c0_memberEnd").withCard(2);
c0_composite = Clafer("c0_composite").withCard(1, 1).extending(c0_AggregationKind);
c0_none = Clafer("c0_none").withCard(1, 1).extending(c0_AggregationKind);
c0_shared = Clafer("c0_shared").withCard(1, 1).extending(c0_AggregationKind);
c0_isCovering = c0_GeneralizationSet.addChild("c0_isCovering").withCard(0, 1);
c0_isDisjoint = c0_GeneralizationSet.addChild("c0_isDisjoint").withCard(0, 1);
c0_powertype = c0_GeneralizationSet.addChild("c0_powertype").withCard(0, 1);
c1_generalization = c0_GeneralizationSet.addChild("c1_generalization");
c0_ownedElement.refToUnique(c0_Element);
c0_owner.refToUnique(c0_Element);
c0_visibility.refToUnique(c0_VisibilityKind);
c0_relatedElement.refToUnique(c0_Element);
c0_source.refToUnique(c0_Element);
c0_target.refToUnique(c0_Element);
c0_superClass.refToUnique(c0_Class);
c0_aggregation.refToUnique(c0_AggregationKind);
c0_class.refToUnique(c0_Class);
c0_opposite.refToUnique(c0_Property);
c0_owningAssociation.refToUnique(c0_Association);
c0_redefinedProperty.refToUnique(c0_Property);
c0_subsettedProperty.refToUnique(c0_Property);
c0_datatype.refToUnique(c0_DataType);
c0_association.refToUnique(c0_Association);
c0_associationEnd.refToUnique(c0_Property);
c0_enumeration.refToUnique(c0_Enumeration);
c0_feature.refToUnique(c0_Feature);
c0_inheritedMember.refToUnique(c0_NamedElement);
c0_general.refToUnique(c0_Classifier);
c0_attribute.refToUnique(c0_Property);
c0_redefinedClassifier.refToUnique(c0_Classifier);
c0_powertypeExtent.refToUnique(c0_GeneralizationSet);
c0_featuringClassifier.refToUnique(c0_Classifier);
c0_classifier.refToUnique(c0_Classifier);
c0_owningInstance.refToUnique(c0_InstanceSpecification);
c0_definingFeature.refToUnique(c0_StructuralFeature);
c0_instance.refToUnique(c0_InstanceSpecification);
c0_specific.refToUnique(c0_Classifier);
c1_general.refToUnique(c0_Classifier);
c0_generalizationSet.refToUnique(c0_GeneralizationSet);
c1_relatedElement.refToUnique(c0_Element);
c0_endType.refToUnique(c0_NamedElement);
c0_memberEnd.refToUnique(c0_Property);
c0_powertype.refToUnique(c0_Classifier);
c1_generalization.refToUnique(c0_Generalization);
c0_Element.addConstraint(all([decl([x = local("x")], join($this(), c0_ownedElement))], $in($this(), joinRef(join(joinRef(x), c0_owner)))));
c0_Element.addConstraint(all([decl([x = local("x")], join($this(), c0_owner))], $in($this(), joinRef(join(joinRef(x), c0_ownedElement)))));
c0_Property.addConstraint(all([decl([x = local("x")], join($this(), c0_owningAssociation))], $in($this(), join(joinRef(x), c0_ownedEnd))));
c0_Property.addConstraint(all([decl([x = local("x")], join($this(), c0_datatype))], $in($this(), join(joinRef(x), c0_ownedAttribute))));
c0_Property.addConstraint(all([decl([x = local("x")], join($this(), c0_association))], $in($this(), joinRef(join(joinRef(x), c0_memberEnd)))));
c0_Property.addConstraint(all([decl([x = local("x")], join($this(), c0_associationEnd))], $in($this(), join(joinRef(x), c0_qualifier))));
c0_qualifier.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_associationEnd))));
c0_ownedLiteral.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_enumeration))));
c0_ownedAttribute.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_datatype))));
c0_EnumerationLiteral.addConstraint(all([decl([x = local("x")], join($this(), c0_enumeration))], $in($this(), join(joinRef(x), c0_ownedLiteral))));
c0_Classifier.addConstraint(all([decl([x = local("x")], join($this(), c0_feature))], $in($this(), joinRef(join(joinRef(x), c0_featuringClassifier)))));
c0_Classifier.addConstraint(all([decl([x = local("x")], join($this(), c0_powertypeExtent))], $in($this(), joinRef(join(joinRef(x), c0_powertype)))));
c0_generalization.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_specific))));
c0_Feature.addConstraint(all([decl([x = local("x")], join($this(), c0_featuringClassifier))], $in($this(), joinRef(join(joinRef(x), c0_feature)))));
c0_slot.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_owningInstance))));
c0_Slot.addConstraint(all([decl([x = local("x")], join($this(), c0_owningInstance))], $in($this(), join(joinRef(x), c0_slot))));
c0_Generalization.addConstraint(all([decl([x = local("x")], join($this(), c0_specific))], $in($this(), join(joinRef(x), c0_generalization))));
c0_Generalization.addConstraint(all([decl([x = local("x")], join($this(), c0_generalizationSet))], $in($this(), joinRef(join(joinRef(x), c1_generalization)))));
c0_Association.addConstraint(all([decl([x = local("x")], join($this(), c0_memberEnd))], $in($this(), joinRef(join(joinRef(x), c0_association)))));
c0_Association.addConstraint(implies(greaterThan(card(join($this(), c0_memberEnd)), constant(2)), $in(joinRef(join($this(), c0_memberEnd)), join($this(), c0_ownedEnd))));
c0_ownedEnd.addConstraint($in(joinParent($this()), joinRef(join($this(), c0_owningAssociation))));
c0_GeneralizationSet.addConstraint(all([decl([x = local("x")], join($this(), c0_powertype))], $in($this(), joinRef(join(joinRef(x), c0_powertypeExtent)))));
c0_GeneralizationSet.addConstraint(all([decl([x = local("x")], join($this(), c1_generalization))], $in($this(), joinRef(join(joinRef(x), c0_generalizationSet)))));
