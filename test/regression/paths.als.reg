open util/integer
pred show {}


abstract sig c1_Person
{ r_c2_age : one c2_age
, r_c3_maritalStatus : one c3_maritalStatus
, r_c18_children : set c18_children
, r_c19_parents : set c19_parents }
{ #r_c19_parents <= 2 }

sig c2_age
{ ref : one Int }
{ one @r_c2_age.this }

sig c3_maritalStatus
{ r_c4_neverMarried : lone c4_neverMarried
, r_c5_married : lone c5_married
, r_c17_divorced : lone c17_divorced }
{ one @r_c3_maritalStatus.this
  let children = (r_c4_neverMarried + r_c5_married + r_c17_divorced) | one children }

sig c4_neverMarried
{}
{ one @r_c4_neverMarried.this }

sig c5_married
{ r_c9_spouse : one c9_spouse }
{ one @r_c5_married.this
  (((this.~@r_c5_married).~@r_c3_maritalStatus).@r_c2_age.@ref) >= 3 }

sig c9_spouse
{ ref : one c1_Person }
{ one @r_c9_spouse.this
  (this.@ref) != (((this.~@r_c9_spouse).~@r_c5_married).~@r_c3_maritalStatus) }

sig c17_divorced
{}
{ one @r_c17_divorced.this }

sig c18_children
{ ref : one c1_Person }
{ one @r_c18_children.this }

sig c19_parents
{ ref : one c1_Person }
{ one @r_c19_parents.this }

one sig c20_Alice extends c1_Person
{}

one sig c21_Bob extends c1_Person
{}

