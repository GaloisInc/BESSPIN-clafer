open util/integer
pred show {}
run show for 1 but 3 c0_Command, 2 c0_Port, 4 c0_Request, 2 c0_input, 2 c0_output

abstract sig c0_Feature
{}

lone sig c0_express extends c0_Feature
{}

fact { (some c0_express) <=> (some c0_downX) }
abstract sig c0_Component
{ r_c0_Port : set c0_Port }

abstract sig c0_Port
{ r_c0_input : lone c0_input
, r_c0_output : lone c0_output }
{ one @r_c0_Port.this
  let children = (r_c0_input + r_c0_output) | one children }

sig c0_input
{}
{ one @r_c0_input.this }

sig c0_output
{}
{ one @r_c0_output.this }

abstract sig c0_Command
{}

one sig c0_motorUp extends c0_Command
{}

one sig c0_motorDown extends c0_Command
{}

one sig c0_motorStop extends c0_Command
{}

abstract sig c0_Request
{}

one sig c0_up extends c0_Request
{}

one sig c0_down extends c0_Request
{}

lone sig c0_downX extends c0_Request
{}

one sig c0_stop extends c0_Request
{}

one sig c0_WinCtrl extends c0_Component
{ r_c0_cmd : one c0_cmd
, r_c0_req : one c0_req }

one sig c0_cmd extends c0_Port
{ ref : one c0_Command }
{ some this.@r_c0_output }

one sig c0_req extends c0_Port
{ ref : one c0_Request }
{ some this.@r_c0_input }

